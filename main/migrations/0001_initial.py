# Generated by Django 4.0.6 on 2022-07-04 21:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('created', models.DateTimeField()),
                ('reddit_id', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('score', models.IntegerField(default=0)),
                ('reddit_score', models.IntegerField(default=0)),
                ('upvote_ratio', models.FloatField(default=1)),
                ('reddit_link', models.TextField(null=True)),
                ('external_link', models.TextField(null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('subreddit_name_prefixed', models.TextField(null=True)),
                ('user_name', models.TextField(null=True)),
                ('nsfw', models.BooleanField(null=True)),
                ('is_local', models.BooleanField(default=False)),
                ('mean', models.BooleanField(default=False)),
                ('override_mean', models.BooleanField(default=False)),
                ('thing_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thing_uuid', models.UUIDField()),
                ('direction', models.CharField(choices=[('UP', 'Up'), ('DN', 'Down')], default=None, max_length=2, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_nsfw', models.BooleanField(default=False, verbose_name='Show nsfw')),
                ('show_mean', models.BooleanField(default=False, verbose_name='Show mean')),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created', models.DateTimeField()),
                ('reddit_id', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('score', models.IntegerField(default=0)),
                ('reddit_score', models.IntegerField(default=0)),
                ('reddit_link', models.TextField(blank=True, null=True)),
                ('parent_reddit_id', models.CharField(blank=True, max_length=64, null=True)),
                ('user_name', models.TextField(blank=True, null=True)),
                ('removed_from_reddit', models.BooleanField(default=False)),
                ('is_local', models.BooleanField(default=False)),
                ('nsfw', models.BooleanField(default=False)),
                ('mean', models.BooleanField(default=False)),
                ('extra', models.JSONField(default=dict)),
                ('override_mean', models.BooleanField(default=False)),
                ('thing_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('parent_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.comment')),
                ('post_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.post')),
            ],
        ),
        migrations.AddConstraint(
            model_name='vote',
            constraint=models.UniqueConstraint(fields=('user', 'thing_uuid'), name='unique_user_thing_combination'),
        ),
    ]

{"version":3,"file":"static/js/727.b363476e.chunk.js","mappings":"wPAKe,SAASA,EAAT,GAAgE,IAAxCC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,kBACrD,OAAI,OAACF,QAAD,IAACA,GAAAA,EAAWG,WAAcF,GAG1BG,QAAQC,IAAI,iBACL,kBAAOC,UAAU,eACpBC,UAAU,EAAMC,UAAU,EAAOC,OAAK,EAACC,MAAI,EAACC,QAAQ,OAAOC,aAAW,EAACC,WAAW,EAClFC,YAAaZ,EAFV,UAGH,mBAAQ,WAAUF,EAAUe,IAAKC,IAAKhB,EAAUe,IAAKE,KAAK,kBANvD,SAACC,EAAD,CAA2BC,SAAUnB,EAAUe,IAAKK,SAAUnB,EAAOC,kBAAmBA,GAStG,CAEM,SAASgB,EAAT,GAA+E,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,SAAUlB,EAAqB,EAArBA,kBACtDmB,GAAQC,EAAAA,EAAAA,QAAyB,MAoEvC,OAnEAC,EAAAA,EAAAA,YAAU,WAAO,SACEC,EADH,gFACZ,WAA4BT,GAA5B,+GAEqCU,MAAMV,GAF3C,8BAEiDW,OAFjD,cAEcC,EAFd,gBAG8BA,EAAQC,cAHtC,cAGcC,EAHd,OAIcC,EAAU,IAAIC,UAAUF,GACxBG,EAAQC,IAAAA,IAAAA,MAAAA,OAAuBH,GAC/BI,EAAQF,EAAM,GAAGE,MACjBC,EAPd,6BAOgDD,EAPhD,uBAQe,CACHN,YAAaC,EACbM,UAAAA,IAVZ,2DAae,CAAEC,MAAK,OAbtB,2DADY,oEAkBZ,sHACUC,EAAU,GACV,gBAAiBC,OAF3B,uBAGQlC,QAAQgC,MAAM,2BAHtB,6BAM0B,OAAlBf,EAAMkB,QANd,uBAOQnC,QAAQgC,MAAM,oBAPtB,gCAUsB,CAACjB,EAAUC,GAVjC,gDAUeL,EAVf,eAWwDS,EAAaT,GAXrE,iBAWgBa,EAXhB,EAWgBA,YAAaO,EAX7B,EAW6BA,UAAWC,EAXxC,EAWwCA,MAChChC,QAAQC,IAAI,CAAE8B,UAAAA,EAAWC,MAAAA,EAAOrB,IAAAA,IAC5BqB,IAAUD,EACV/B,QAAQgC,MAAMA,GACNI,YAAYC,gBAAgBN,GAGpCE,EAAQK,KAAK,CAAEd,YAAAA,EAAaO,UAAAA,IAF5B/B,QAAQgC,MAAR,0CAAiDD,IAhB7D,sCAsB2B,IAAnBE,EAAQM,OAtBhB,wBAuBQvC,QAAQgC,MAAM,wBAvBtB,2BAuCI,IAVAQ,EAAc,IAAIJ,YAClBnB,EAAMkB,QAAQvB,IAAM6B,IAAIC,gBAAgBF,GACpCG,EAAcV,EAAQM,OACpBK,EAAY,WAEU,IAAD,EAAH,KADpBD,GAAe,KAEXH,EAAYK,cACZ,UAAA5B,EAAMkB,eAAN,SAAeW,OAEtB,EAtCL,aAuCS,WAAQtB,EAAR,EAAQA,YAAaO,EAArB,EAAqBA,UACtBS,EAAYO,iBAAiB,cAAc,WACvC,IAAMC,EAAeR,EAAYS,gBAAgBlB,GACjDiB,EAAaD,iBAAiB,YAAaH,GAC3CI,EAAaE,aAAa1B,EAC7B,GA5CT,EAuCI,MAAyCS,EAAzC,eAAmD,IAvCvD,6CAlBY,0DAiEZkB,EACH,GAAE,CAACnC,EAAUD,KACP,kBAAOb,UAAU,eACpBkD,IAAKnC,EAAOd,UAAU,EAAMC,UAAU,EAAOC,OAAK,EAACC,MAAI,EAACC,QAAQ,OAAOC,aAAW,EAACC,WAAW,EAC9FC,YAAaZ,GAEpB,C","sources":["components/MediaElement/components/VideoHandler.tsx"],"sourcesContent":["import muxjs from 'mux.js';\nimport { useEffect, useRef } from \"react\";\n\n\n\nexport default function VideoHandler({ videoInfo, audio, onLoadingComplete }) {\n    if (!videoInfo?.hasAudio && !!audio) {\n        return <SeparateAudioVideoHandler videoUrl={videoInfo.url} audioUrl={audio} onLoadingComplete={onLoadingComplete} />\n    } else {\n        console.log(\"VideoHandler\")\n        return <video className=\"max-h-screen\"\n            controls={true} autoPlay={false} muted loop preload=\"auto\" playsInline draggable={false}\n            onLoadStart={onLoadingComplete}>\n            <source data-src={videoInfo.url} src={videoInfo.url} type=\"video/mp4\" />\n        </video>\n    }\n}\n\nexport function SeparateAudioVideoHandler({ videoUrl, audioUrl, onLoadingComplete }) {\n    const video = useRef<HTMLVideoElement>(null);\n    useEffect(() => {\n        async function loadVideoUrl(url) {\n            try {\n                const vidBlob = await (await fetch(url)).blob();\n                const vidBuff = await vidBlob.arrayBuffer();\n                const vidInt8 = new Int8Array(vidBuff);\n                const probe = muxjs.mp4.probe.tracks(vidInt8)\n                const codec = probe[0].codec;\n                const mimeCodec = `video/mp4; codecs=\"${codec}\"`;\n                return {\n                    arrayBuffer: vidBuff,\n                    mimeCodec,\n                }\n            } catch (error) {\n                return { error };\n            }\n        }\n\n        async function loadVideo() {\n            const sources = [] as any;\n            if (!('MediaSource' in window)) {\n                console.error(\"MediaSource unsupported\");\n                return;\n            }\n            if (video.current === null) {\n                console.error('videoRef not set');\n                return;\n            }\n            for (const url of [videoUrl, audioUrl]) {\n                const { arrayBuffer, mimeCodec, error } = await loadVideoUrl(url);\n                console.log({ mimeCodec, error, url })\n                if (error || !mimeCodec) {\n                    console.error(error);\n                } else if (!MediaSource.isTypeSupported(mimeCodec)) {\n                    console.error(`Unsupported MIME type or codec: ${mimeCodec}`);\n                } else {\n                    sources.push({ arrayBuffer, mimeCodec });\n                }\n            }\n\n            if (sources.length === 0) {\n                console.error(\"No supported sources\");\n                return;\n            }\n\n            let mediaSource: MediaSource;\n\n            mediaSource = new MediaSource();\n            video.current.src = URL.createObjectURL(mediaSource);\n            let openSources = sources.length;\n            const updateEnd = () => {\n                openSources -= 1;\n                if (openSources === 0) {\n                    mediaSource.endOfStream();\n                    video.current?.play();\n                }\n            }\n            for (const { arrayBuffer, mimeCodec } of sources) {\n                mediaSource.addEventListener('sourceopen', () => {\n                    const sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);\n                    sourceBuffer.addEventListener('updateend', updateEnd);\n                    sourceBuffer.appendBuffer(arrayBuffer);\n                });\n            }\n        }\n        loadVideo();\n    }, [audioUrl, videoUrl]);\n    return <video className=\"max-h-screen\"\n        ref={video} controls={true} autoPlay={false} muted loop preload=\"auto\" playsInline draggable={false}\n        onLoadStart={onLoadingComplete}>\n    </video>\n}"],"names":["VideoHandler","videoInfo","audio","onLoadingComplete","hasAudio","console","log","className","controls","autoPlay","muted","loop","preload","playsInline","draggable","onLoadStart","url","src","type","SeparateAudioVideoHandler","videoUrl","audioUrl","video","useRef","useEffect","loadVideoUrl","fetch","blob","vidBlob","arrayBuffer","vidBuff","vidInt8","Int8Array","probe","muxjs","codec","mimeCodec","error","sources","window","current","MediaSource","isTypeSupported","push","length","mediaSource","URL","createObjectURL","openSources","updateEnd","endOfStream","play","addEventListener","sourceBuffer","addSourceBuffer","appendBuffer","loadVideo","ref"],"sourceRoot":""}